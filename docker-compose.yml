include:
- path: ./superset/docker-compose.yml

  
services:
  # === PostgreSQL Database - Data Source ===
  postgres:
    build:
      context: ./ingest/postgres
    container_name: postgres-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-app_db} -c 'SELECT 1 FROM users LIMIT 1;'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - observability

  # === Zookeeper - Required for Kafka ===
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - observability

  # === Kafka - VAST Message Bus (Ingestion) ===
  kafka-ingestion:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-ingestion
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-ingestion:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - observability

  # === OpenTelemetry Collector - Metrics Collection ===
  otel-collector:
    build:
      context: ./ingest/otel-collector
      dockerfile: Dockerfile
    container_name: otel-collector
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "8888:8888" # Metrics endpoint
      - "13133:13133" # Health check
    depends_on:
      postgres:
        condition: service_healthy
      kafka-ingestion:
        condition: service_healthy
    networks:
      - observability
    # Note: otel-collector-config.yaml reads monitor_user/password from its *own* env
    environment:
      - MONITOR_USER=${MONITOR_USER:-monitor_user}
      - MONITOR_PASSWORD=${MONITOR_PASSWORD:-monitor_password}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}

  # === Custom Python Collector - Logs & Query Analytics ===
  python-collector:
    build:
      context: ./ingest/python-collector
      dockerfile: Dockerfile
    container_name: python-collector
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
      - POSTGRES_USER=${MONITOR_USER:-monitor_user}
      - POSTGRES_PASSWORD=${MONITOR_PASSWORD:-monitor_password}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka-ingestion:9092}
      - COLLECTION_INTERVAL=${COLLECTION_INTERVAL:-30}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      kafka-ingestion:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped

  # === Load Simulator - Generates continuous database traffic ===
  load-simulator:
    build:
      context: ./ingest/load-simulator
      dockerfile: Dockerfile
    container_name: load-simulator
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-app_db}
      - POSTGRES_USER=${POSTGRES_USER:-app_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-app_password}
      - QUERY_RATE=${QUERY_RATE:-10}
      - SLOW_QUERY_PROBABILITY=${SLOW_QUERY_PROBABILITY:-0.1}
      - WRITE_PROBABILITY=${WRITE_PROBABILITY:-0.3}
      - SYSLOG_PROBABILITY=${SYSLOG_PROBABILITY:-0.2}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped

  # === Kafka UI - For monitoring Kafka topics ===
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ingestion
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-ingestion:9092
    depends_on:
      - kafka-ingestion
    networks:
      - observability

  # === Processor Service - Consumes Kafka and writes to VAST ===
  processor:
    build:
      context: . # Build context is the root
      dockerfile: ./processor/Dockerfile
    container_name: processor
    networks:
      - observability
    env_file:
      - .env # Loads all configs from the top-level .env
    depends_on:
      - kafka-ingestion
    restart: unless-stopped

  # === Trino Config Generator ===
  setup_config:
    image: hairyhenderson/gomplate:latest
    working_dir: /workspace
    env_file:
      - .env
    volumes:
      - ./trino/templates:/workspace/templates
      - ./trino/generated:/workspace/output
    command: "-f /workspace/templates/vast.properties-template -o /workspace/output/vast.properties"
    networks:
      - proxy

        #  # === Traefik (Proxy for Trino) ===
        #  traefik:
        #    image: traefik:v3.1.6
        #    container_name: traefik
        #    restart: unless-stopped
        #    ports:
        #      - 8443:443
        #    networks:
        #      - proxy
        #    platform: linux/amd64
        #    volumes:
        #      - /var/run/docker.sock:/var/run/docker.sock
        #    command:
        #      - --log.level=INFO
        #      - --accesslog=true
        #      - --accesslog.fields.names.HealthCheck=true
        #      - --providers.docker=true
        #      - --providers.docker.exposedByDefault=false
        #      - --providers.docker.network=proxy
        #      - --entrypoints.websecure.address=:443
        #      - --entrypoints.websecure.asDefault=true
        #    healthcheck:
        #      test: ["CMD", "traefik", "healthcheck"]
        #      interval: 10s
        #      timeout: 5s
        #      retries: 3

  # === Trino (Analytics Query Engine) ===
  trino:
    container_name: trino
    image: vastdataorg/trino-vast:${TRINO_VERSION}
    restart: unless-stopped
    depends_on:
      setup_config:
        condition: service_completed_successfully
    mem_limit: 8g
    ports:
      - 18080:8080
    networks:
      - observability
      - proxy
    platform: linux/amd64
    env_file:
      - path: .env
    volumes:
      - ./trino/generated/vast.properties:/etc/trino/catalog/vast.properties:ro
      - ./trino/config.properties:/etc/trino/config.properties:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info"]
      interval: 30s
      retries: 10
        #    labels:
        #      - traefik.enable=true
        #      - traefik.http.routers.mytrino.rule=PathPrefix(`/`)
        #      - traefik.http.routers.mytrino.entrypoints=websecure
        #      - traefik.http.routers.mytrino.tls=true
        #      - traefik.http.routers.mytrino.middlewares=trino-headers@docker
        #      - traefik.http.middlewares.trino-headers.headers.customRequestHeaders.X-Forwarded-Proto=https
        #      - traefik.http.services.trino.loadbalancer.healthcheck.path=/v1/info
        #      - traefik.http.services.trino.loadbalancer.healthcheck.interval=10s
        #
        #
        #  # === Superset Services ===
        #  superset-redis:
        #    image: redis:7
        #    container_name: superset_cache
        #    restart: unless-stopped
        #    volumes:
        #      - superset_redis_cache:/data
        #    networks:
        #      - observability
        #    healthcheck:
        #      test: ["CMD", "redis-cli", "ping"]
        #      interval: 10s
        #      timeout: 5s
        #      retries: 5
        #
        #  superset-db:
        #    image: postgres:15
        #    container_name: superset_db
        #    restart: unless-stopped
        #    environment:
        #      POSTGRES_USER: ${SUPERSET_POSTGRES_USER:-superset}
        #      POSTGRES_PASSWORD: ${SUPERSET_POSTGRES_PASSWORD:-superset}
        #      POSTGRES_DB: ${SUPERSET_POSTGRES_DB:-superset}
        #      EXAMPLES_USER: ${EXAMPLES_USER:-examples}
        #      EXAMPLES_PASSWORD: ${EXAMPLES_PASSWORD:-examples}
        #      EXAMPLES_DB: ${EXAMPLES_DB:-examples}
        #    volumes:
        #      - superset_db_home:/var/lib/postgresql/data
        #      - ./superset/docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
        #    networks:
        #      - observability
        #    healthcheck:
        #      test: ["CMD-SHELL", "pg_isready -U ${SUPERSET_POSTGRES_USER:-superset} -d ${SUPERSET_POSTGRES_DB:-superset}"]
        #      interval: 10s
        #      timeout: 5s
        #      retries: 5
        #
        #  superset-app:
        #    image: apachesuperset.docker.scarf.sh/apache/superset:${TAG:-4.0.2}
        #    container_name: superset_app
        #    command: bash -c "pip3 install trino[sqlalchemy] && /app/docker/docker-bootstrap.sh app-gunicorn"
        #    user: "root"
        #    env_file: 
        #      - .env
        #    restart: unless-stopped
        #    ports:
        #      - "8088:8088"
        #    depends_on:
        #      superset-db:
        #        condition: service_healthy
        #      superset-redis:
        #        condition: service_healthy
        #    volumes:
        #      - ./superset/docker:/app/docker
        #      - superset_home:/app/superset_home
        #    networks:
        #      - observability
        #    healthcheck:
        #      test: ["CMD-SHELL", "curl -f http://localhost:8088/health"]
        #      interval: 30s
        #      timeout: 10s
        #      retries: 5
        #      start_period: 300s
        #
        #  superset-init:
        #    image: apachesuperset.docker.scarf.sh/apache/superset:${TAG:-4.0.2}
        #    container_name: superset_init
        #    command: ["/app/docker/docker-init.sh"]
        #    depends_on:
        #      superset-db:
        #        condition: service_healthy
        #      superset-redis:
        #        condition: service_healthy
        #    user: "root"
        #    volumes:
        #      - ./superset/docker:/app/docker
        #      - superset_home:/app/superset_home
        #    networks:
        #      - observability
        #    healthcheck:
        #      disable: true
        #
        #  superset-worker:
        #    image: apachesuperset.docker.scarf.sh/apache/superset:${TAG:-4.0.2}
        #    container_name: superset_worker
        #    command: ["/app/docker/docker-bootstrap.sh", "worker"]
        #    restart: unless-stopped
        #    depends_on:
        #      superset-db:
        #        condition: service_healthy
        #      superset-redis:
        #        condition: service_healthy
        #    user: "root"
        #    volumes:
        #      - ./superset/docker:/app/docker
        #      - superset_home:/app/superset_home
        #    networks:
        #      - observability
        #    healthcheck:
        #      test: ["CMD-SHELL", "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME"]
        #      interval: 30s
        #      timeout: 10s
        #      retries: 5
        #      start_period: 300s
        #
        #  superset-worker-beat:
        #    image: apachesuperset.docker.scarf.sh/apache/superset:${TAG:-4.0.2}
        #    container_name: superset_worker_beat
        #    command: ["/app/docker/docker-bootstrap.sh", "beat"]
        #    restart: unless-stopped
        #    depends_on:
        #      superset-db:
        #        condition: service_healthy
        #      superset-redis:
        #        condition: service_healthy
        #    user: "root"
        #    volumes:
        #      - ./superset/docker:/app/docker
        #      - superset_home:/app/superset_home
        #    networks:
        #      - observability
        #    healthcheck:
        #      disable: true
        #
volumes:
  postgres_data:
    # superset_db_home:
    # superset_redis_cache:
    # superset_home:

networks:
  observability:
    driver: bridge
  proxy:
    name: proxy
