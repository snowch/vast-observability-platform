services:
  # PostgreSQL Database - Data Source
  postgres:
    build:
      context: ./postgres
    container_name: postgres-db
    command: postgres -c shared_preload_libraries=pg_stat_statements
    environment:
      POSTGRES_DB: app_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: app_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Keep this for persistent data!
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d app_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - observability

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - observability

  # Kafka - VAST Message Bus (Ingestion)
  kafka-ingestion:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-ingestion
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-ingestion:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - observability

  # OpenTelemetry Collector - Metrics Collection
  otel-collector:
    build:
      context: ./otel-collector
      dockerfile: Dockerfile
    container_name: otel-collector
    ports:
      - "4317:4317"    # OTLP gRPC receiver
      - "4318:4318"    # OTLP HTTP receiver
      - "8888:8888"    # Metrics endpoint
      - "13133:13133"  # Health check
    depends_on:
      postgres:
        condition: service_healthy
      kafka-ingestion:
        condition: service_healthy
    networks:
      - observability


  # Custom Python Collector - Logs & Query Analytics
  python-collector:
    build:
      context: ./python-collector
      dockerfile: Dockerfile
    container_name: python-collector
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=app_db
      - POSTGRES_USER=monitor_user
      - POSTGRES_PASSWORD=monitor_password
      - KAFKA_BOOTSTRAP_SERVERS=kafka-ingestion:9092
      - COLLECTION_INTERVAL=30
      - ENVIRONMENT=development
    # volumes:
    #   - ./config:/config     # only mount external config, not code
    depends_on:
      postgres:
        condition: service_healthy
      kafka-ingestion:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped

  # Load Simulator - Generates continuous database traffic
  load-simulator:
    build:
      context: ./load-simulator
      dockerfile: Dockerfile
    container_name: load-simulator
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=app_db
      - POSTGRES_USER=app_user
      - POSTGRES_PASSWORD=app_password
      - QUERY_RATE=10
      - SLOW_QUERY_PROBABILITY=0.1
      - WRITE_PROBABILITY=0.3
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped

  # Kafka UI - For monitoring Kafka topics
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ingestion
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-ingestion:9092
    depends_on:
      - kafka-ingestion
    networks:
      - observability

volumes:
  postgres_data:

networks:
  observability:
    driver: bridge
